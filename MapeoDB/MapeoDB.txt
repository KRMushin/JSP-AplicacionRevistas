create schema app_revistas;
use app_revistas;

CREATE TABLE usuarios (
    nombre_usuario VARCHAR(15) NOT NULL UNIQUE PRIMARY KEY,
    password_usuario VARCHAR(200) NOT NULL,
    rol_usuario ENUM('COMPRADOR', 'SUSCRIPTOR', 'EDITOR', 'ADMINISTRADOR') NOT NULL,
    nombre_pila VARCHAR(100) NOT NULL,
    descripcion_usuario TEXT,
    foto BLOB
);

CREATE TABLE preferencias_usuario (    
	id_preferencia BIGINT AUTO_INCREMENT PRIMARY KEY,      
	nombre_usuario VARCHAR(15),
	tipo_preferencia ENUM('HOBBIE', 'GUSTO', 'TEMA', 'PREFERENCIA') NOT NULL,      	 
	valor_preferencia VARCHAR(20) NOT NULL,      
	FOREIGN KEY (nombre_usuario) REFERENCES usuarios(nombre_usuario)  
);

CREATE TABLE carteras_digitales (
    usuario_representante VARCHAR(15) PRIMARY KEY, 
    saldo_disponible DECIMAL(10,2) NOT NULL DEFAULT 0.0,
    FOREIGN KEY (usuario_representante) REFERENCES usuarios(nombre_usuario)  
);

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

public class AuthService {
    private static final BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    /**
     * Verifica si la contraseña ingresada coincide con la contraseña almacenada.
     *
     * @param plainPassword  La contraseña ingresada por el usuario.
     * @param storedPassword La contraseña encriptada almacenada en la base de datos.
     * @return true si las contraseñas coinciden, false de lo contrario.
     */
    public static boolean verifyPassword(String plainPassword, String storedPassword) {
        return passwordEncoder.matches(plainPassword, storedPassword);
    }
}

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

public class PasswordUtil {
    private static final BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

    /**
     * Encripta la contraseña del usuario utilizando BCrypt.
     *
     * @param plainPassword La contraseña ingresada por el usuario.
     * @return La contraseña encriptada.
     */
    public static String encryptPassword(String plainPassword) {
        return passwordEncoder.encode(plainPassword);
    }
}

